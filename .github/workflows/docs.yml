name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '*.md'
      - 'src/**'
      - 'include/**'
  pull_request:
    paths:
      - 'docs/**'
      - '*.md'
      - 'src/**'
      - 'include/**'

jobs:
  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          doxygen \
          graphviz \
          python3 \
          python3-pip \
          pandoc \
          texlive-latex-base \
          texlive-fonts-recommended
    
    - name: Install Python packages
      run: |
        pip3 install sphinx sphinx-rtd-theme breathe exhale
    
    - name: Generate Doxygen documentation
      run: |
        doxygen Doxyfile || echo "Doxygen completed with warnings"
    
    - name: Build Sphinx documentation
      run: |
        if [ -d "docs" ]; then
          cd docs
          make html
        else
          echo "No docs directory found, creating basic documentation"
          mkdir -p docs/source
          cat > docs/source/index.rst << 'EOF'
          Message Router Documentation
          ===========================
          
          Welcome to the Message Router documentation!
          
          .. toctree::
             :maxdepth: 2
             :caption: Contents:
          
             api/index
             architecture
             performance
             installation
             configuration
          
          Indices and tables
          ==================
          
          * :ref:`genindex`
          * :ref:`modindex`
          * :ref:`search`
          EOF
          
          cat > docs/source/conf.py << 'EOF'
          import os
          import sys
          sys.path.insert(0, os.path.abspath('../../'))
          
          project = 'Message Router'
          copyright = '2025, Message Router Team'
          author = 'Message Router Team'
          
          extensions = [
              'sphinx.ext.autodoc',
              'sphinx.ext.viewcode',
              'sphinx.ext.napoleon',
              'breathe',
              'exhale'
          ]
          
          breathe_projects = { "MessageRouter": "../doxygen/xml/" }
          breathe_default_project = "MessageRouter"
          
          exhale_args = {
              "containmentFolder":     "./api",
              "rootFileName":          "library_root.rst",
              "rootFileTitle":         "Library API",
              "doxygenStripFromPath":  "..",
              "createTreeView":        True,
              "exhaleExecutesDoxygen": False,
              "exhaleDoxygenStdin":    "INPUT = ../include"
          }
          
          html_theme = 'sphinx_rtd_theme'
          EOF
          
          cd docs
          sphinx-build -b html source build
        fi
    
    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        find src/ include/ -name "*.cpp" -o -name "*.h" | \
        xargs doxygen - << 'EOF'
        PROJECT_NAME = "Message Router API"
        INPUT = src/ include/
        OUTPUT_DIRECTORY = docs/api
        GENERATE_HTML = YES
        GENERATE_LATEX = NO
        GENERATE_XML = YES
        EXTRACT_ALL = YES
        EXTRACT_PRIVATE = YES
        EXTRACT_STATIC = YES
        CALL_GRAPH = YES
        CALLER_GRAPH = YES
        CLASS_GRAPH = YES
        COLLABORATION_GRAPH = YES
        INCLUDE_GRAPH = YES
        INCLUDED_BY_GRAPH = YES
        GRAPHICAL_HIERARCHY = YES
        DIRECTORY_GRAPH = YES
        DISABLE_INDEX = NO
        GENERATE_TREEVIEW = YES
        FULL_SIDEBAR = NO
        HTML_EXTRA_STYLESHEET = 
        HTML_COLORSTYLE = AUTO
        HTML_COLORSTYLE_GREY = NO
        HTML_COLORSTYLE_HUE = 220
        HTML_TIMESTAMP = YES
        HTML_DYNAMIC_SECTIONS = NO
        HTML_INDEX_NUM_ENTRIES = 100
        GENERATE_DOCSET = NO
        DOCSET_FEEDNAME = "Message Router API"
        DOCSET_BUNDLE_ID = org.messagerouter.api
        DOCSET_PUBLISHER_ID = org.messagerouter
        DOCSET_PUBLISHER_NAME = "Message Router Team"
        GENERATE_QHP = NO
        GENERATE_QCH = NO
        GENERATE_ECLIPSEHELP = NO
        DISABLE_INDEX = NO
        GENERATE_TREEVIEW = YES
        FULL_SIDEBAR = NO
        HTML_EXTRA_STYLESHEET = 
        HTML_COLORSTYLE = AUTO
        HTML_COLORSTYLE_GREY = NO
        HTML_COLORSTYLE_HUE = 220
        HTML_TIMESTAMP = YES
        HTML_DYNAMIC_SECTIONS = NO
        HTML_INDEX_NUM_ENTRIES = 100
        GENERATE_DOCSET = NO
        DOCSET_FEEDNAME = "Message Router API"
        DOCSET_BUNDLE_ID = org.messagerouter.api
        DOCSET_PUBLISHER_ID = org.messagerouter
        DOCSET_PUBLISHER_NAME = "Message Router Team"
        GENERATE_QHP = NO
        GENERATE_QCH = NO
        GENERATE_ECLIPSEHELP = NO
        EOF
    
    - name: Generate performance report
      run: |
        python3 << 'EOF'
        import subprocess
        import json
        import matplotlib.pyplot as plt
        import pandas as pd
        from datetime import datetime
        
        # Run a quick performance test
        result = subprocess.run(['./message_router', 'configs/baseline.json'], 
                              capture_output=True, text=True, timeout=10)
        
        # Parse results
        lines = result.stdout.split('\n')
        performance_data = {}
        
        for line in lines:
            if 'Total Produced:' in line:
                performance_data['produced'] = int(line.split(':')[1].strip())
            elif 'Total Processed:' in line:
                performance_data['processed'] = int(line.split(':')[1].strip())
            elif 'Total Delivered:' in line:
                performance_data['delivered'] = int(line.split(':')[1].strip())
            elif 'Messages Lost:' in line:
                performance_data['lost'] = int(line.split(':')[1].strip())
        
        # Generate performance chart
        if performance_data:
            fig, ax = plt.subplots(figsize=(10, 6))
            categories = ['Produced', 'Processed', 'Delivered', 'Lost']
            values = [performance_data.get('produced', 0), 
                     performance_data.get('processed', 0),
                     performance_data.get('delivered', 0),
                     performance_data.get('lost', 0)]
            
            bars = ax.bar(categories, values, color=['green', 'blue', 'orange', 'red'])
            ax.set_title('Message Router Performance Summary')
            ax.set_ylabel('Message Count')
            
            # Add value labels on bars
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height,
                       f'{value:,}', ha='center', va='bottom')
            
            plt.tight_layout()
            plt.savefig('docs/performance_summary.png', dpi=300, bbox_inches='tight')
            plt.close()
        
        # Generate markdown report
        with open('docs/performance_report.md', 'w') as f:
            f.write("# Performance Report\n\n")
            f.write(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("## Summary\n\n")
            f.write(f"- **Messages Produced**: {performance_data.get('produced', 0):,}\n")
            f.write(f"- **Messages Processed**: {performance_data.get('processed', 0):,}\n")
            f.write(f"- **Messages Delivered**: {performance_data.get('delivered', 0):,}\n")
            f.write(f"- **Messages Lost**: {performance_data.get('lost', 0):,}\n")
            f.write(f"- **Efficiency**: {(performance_data.get('delivered', 0) / max(performance_data.get('produced', 1), 1)) * 100:.2f}%\n\n")
            f.write("## Performance Chart\n\n")
            f.write("![Performance Summary](performance_summary.png)\n")
        
        print("Performance report generated!")
        EOF
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html
        cname: messagerouter.github.io

  spell-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install aspell
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en
    
    - name: Spell check documentation
      run: |
        find . -name "*.md" -not -path "./.git/*" | while read file; do
          echo "Checking $file"
          aspell check --mode=markdown --lang=en "$file" || echo "Spell check completed for $file"
        done
    
    - name: Check for broken links
      run: |
        pip3 install linkchecker
        find . -name "*.md" -not -path "./.git/*" | while read file; do
          echo "Checking links in $file"
          linkchecker --check-extern "$file" || echo "Link check completed for $file"
        done

  code-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          make \
          libjsoncpp-dev \
          libatomic1 \
          build-essential \
          pkg-config \
          lcov \
          gcovr
    
    - name: Build with coverage
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage"
        make -j$(nproc)
    
    - name: Run tests with coverage
      run: |
        cd build
        timeout 30s ./message_router ../configs/baseline.json || echo "Test completed"
        timeout 30s ./message_router ../configs/hot_type.json || echo "Test completed"
        timeout 30s ./message_router ../configs/burst_pattern.json || echo "Test completed"
    
    - name: Generate coverage report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        genhtml coverage.info --output-directory coverage_html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
